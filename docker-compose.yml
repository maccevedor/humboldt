version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgis/postgis:16-3.4-alpine
    container_name: visor_i2d_db
    environment:
      - POSTGRES_DB=i2d_db
      - POSTGRES_USER=i2d_user
      - POSTGRES_PASSWORD=i2d_password
      - POSTGRES_HOST_AUTH_METHOD=trust
      # PostGIS optimization settings
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=postgis
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_MAX_CONNECTIONS=100
    volumes:
      # - postgres_data:/var/lib/postgresql/data/
      - postgres_data_restore:/var/lib/postgresql/data/
      # Initialize PostGIS extensions if needed
      - ./scripts/init-postgis.sql:/docker-entrypoint-initdb.d/01-init-postgis.sql:ro
    ports:
      - "5432:5432"
    networks:
      - visor_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U i2d_user -d i2d_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Django)
  backend:
    build:
      context: ./visor-geografico-I2D-backend
      dockerfile: Dockerfile
    container_name: visor_i2d_backend
    env_file:
      - ./visor-geografico-I2D-backend/.env
    environment:
      - DB_ENGINE=django.contrib.gis.db.backends.postgis
      - ENVIRONMENT=development
      - DEBUG=true
    command: >
      sh -c "pip install unidecode &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn i2dbackend.wsgi --bind 0.0.0.0:8001 --workers 3 --timeout 120 --access-logfile - --error-logfile - --log-level info"
    ports:
      - "8001:8001"
    volumes:
      - ./visor-geografico-I2D-backend:/project
      - ./visor-geografico-I2D-backend/secret.json:/project/secret.json
      - ./visor-geografico-I2D-backend/.env:/project/.env:ro
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - visor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Node.js build + Nginx serve)
  frontend:
    build:
      context: ./visor-geografico-I2D
      dockerfile: DockerfileDev
      target: dev
    container_name: visor_i2d_frontend
    ports:
      - "8080:80"
      - "1234:1234"
      - "1235:1235"
    volumes:
      # - ./visor-geografico-I2D/build:/usr/local/apache2/htdocs/
      - ./visor-geografico-I2D:/home/node/app
    depends_on:
      - backend
    networks:
      - visor_network
    environment:
      # - BACKEND_URL=http://backend:8001
      - NODE_ENV=development
      - PYTHONSERVER=http://localhost:8001/api/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1234/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: visor_i2d_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend
    networks:
      - visor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  geoserver:
    image: kartoza/geoserver:2.18.0
    container_name: geoserver
    ports:
      - "8081:8080"
    volumes:
      - ./datosgs:/var/lib/geoserver_data
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080/geoserver/web || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: always
    environment:
      - EXISTING_DATA_DIR=true
      - DB_BACKEND=POSTGRES
      - HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=i2d_db
      - POSTGRES_USER=i2d_user
      - POSTGRES_PASS=i2d_password
      - GEOSERVER_DATA_DIR=/var/lib/geoserver_data
      - GEOSERVER_ADMIN_PASSWORD=geoserver
    networks:
      - visor_network

  # Redis for caching (optional but recommended)
  # redis:
  #   image: redis:7-alpine
  #   container_name: visor_i2d_redis
  #   ports:
  #     - "6381:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - visor_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

volumes:
  # postgres_data:
  # driver: local
  postgres_data_restore:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  redis_data:
    driver: local
  geoserver_data:
    driver: local

networks:
  visor_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
