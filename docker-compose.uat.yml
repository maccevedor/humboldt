version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgis/postgis:16-3.4-alpine
    container_name: visor_i2d_db_uat
    environment:
      - POSTGRES_DB=i2d_db
      - POSTGRES_USER=i2d_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-i2d_password}
      - POSTGRES_HOST_AUTH_METHOD=md5
      # PostGIS optimization settings
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=postgis
      - POSTGRES_EFFECTIVE_CACHE_SIZE=2GB
      - POSTGRES_SHARED_BUFFERS=512MB
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_WORK_MEM=16MB
    volumes:
      - postgres_data_uat:/var/lib/postgresql/data/
      - ./scripts/init-postgis.sql:/docker-entrypoint-initdb.d/01-init-postgis.sql:ro
    ports:
      - "5432:5432"
    networks:
      - visor_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U i2d_user -d i2d_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API (Django)
  backend:
    build:
      context: ./visor-geografico-I2D-backend
      dockerfile: Dockerfile.prod
    container_name: visor_i2d_backend_uat
    environment:
      # Database Configuration
      - DB_NAME=i2d_db
      - DB_USER=i2d_user
      - DB_PASSWORD=${DB_PASSWORD:-i2d_password}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_ENGINE=django.contrib.gis.db.backends.postgis
      # Django Configuration
      - DJANGO_SETTINGS_MODULE=i2dbackend.settings.prod
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-%%%c!c4yrt250j9-)@b2*g+kw$$%!&dbd*x7d0eulv9u$$!b&f3d}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - PYTHONUNBUFFERED=1
    command: >
      sh -c "pip install unidecode &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn i2dbackend.wsgi --bind 0.0.0.0:8001 --workers 4 --timeout 120 --access-logfile - --error-logfile - --log-level info"
    ports:
      - "8001:8001"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - visor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Node.js build + Nginx serve)
  frontend:
    build:
      context: ./visor-geografico-I2D
      dockerfile: Dockerfile.uat
    container_name: visor_i2d_frontend_uat
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - visor_network
    environment:
      - NODE_ENV=production
      - PYTHONSERVER=http://backend:8001/api/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: visor_i2d_nginx_uat
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      # Add SSL certificates here if needed
      # - ./ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro
      # - ./ssl/key.pem:/etc/nginx/ssl/key.pem:ro
    depends_on:
      - backend
      - frontend
    networks:
      - visor_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # GeoServer
  geoserver:
    image: kartoza/geoserver:2.18.0
    container_name: geoserver_uat
    ports:
      - "8081:8080"
    volumes:
      - geoserver_data_uat:/var/lib/geoserver_data
      # Copy initial data if needed
      # - ./datosgs:/opt/geoserver_data:ro
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080/geoserver/web || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m
    restart: unless-stopped
    environment:
      - EXISTING_DATA_DIR=false
      - DB_BACKEND=POSTGRES
      - HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=i2d_db
      - POSTGRES_USER=i2d_user
      - POSTGRES_PASS=${DB_PASSWORD:-i2d_password}
      - GEOSERVER_DATA_DIR=/var/lib/geoserver_data
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_PASSWORD:-geoserver}
      - INITIAL_MEMORY=2G
      - MAXIMUM_MEMORY=4G
    networks:
      - visor_network

volumes:
  postgres_data_uat:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  geoserver_data_uat:
    driver: local

networks:
  visor_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
